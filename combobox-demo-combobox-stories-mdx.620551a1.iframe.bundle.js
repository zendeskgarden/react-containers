"use strict";(self.webpackChunk_zendeskgarden_react_containers=self.webpackChunk_zendeskgarden_react_containers||[]).push([[436],{"./packages/combobox/demo/combobox.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{controlled:()=>controlled,default:()=>combobox_stories,uncontrolled:()=>uncontrolled});var react=__webpack_require__("./node_modules/react/index.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),external_STORYBOOK_MODULE_CLIENT_API_=__webpack_require__("@storybook/client-api"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),useCombobox=__webpack_require__("./packages/combobox/src/useCombobox.ts"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const ComboboxContainer=props=>{const{children,render=children,...options}=props;return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:render((0,useCombobox.K)(options))})};ComboboxContainer.propTypes={children:prop_types_default().func,render:prop_types_default().func,idPrefix:prop_types_default().string,triggerRef:prop_types_default().any.isRequired,inputRef:prop_types_default().any.isRequired,listboxRef:prop_types_default().any.isRequired,isAutocomplete:prop_types_default().bool,isMultiselectable:prop_types_default().bool,isEditable:prop_types_default().bool,disabled:prop_types_default().bool,hasHint:prop_types_default().bool,hasMessage:prop_types_default().bool,options:prop_types_default().arrayOf(prop_types_default().any).isRequired,inputValue:prop_types_default().string,selectionValue:prop_types_default().oneOfType([prop_types_default().string,prop_types_default().arrayOf(prop_types_default().string)]),isExpanded:prop_types_default().bool,defaultExpanded:prop_types_default().bool,initialExpanded:prop_types_default().bool,activeIndex:prop_types_default().number,defaultActiveIndex:prop_types_default().number,initialActiveIndex:prop_types_default().number,onChange:prop_types_default().func,environment:prop_types_default().any},ComboboxContainer.defaultProps={isEditable:!0};try{ComboboxContainer.displayName="ComboboxContainer",ComboboxContainer.__docgenInfo={description:"",displayName:"ComboboxContainer",props:{render:{defaultValue:null,description:"Provides combobox render prop functions, state, and actions\n@param options.getLabelProps Label props getter\n@param options.getHintProps Hint props getter\n@param options.getTriggerProps Trigger props getter\n@param options.getInputProps Input props getter\n@param options.getTagProps Tag (multiselectable value) props getter\n@param options.getListboxProps Listbox props getter\n@param options.getOptGroupProps Option group props getter\n@param options.getOptionProps Option props getter\n@param options.getMessageProps Message props getter\n@param options.isExpanded Current listbox expansion\n@param options.activeValue Current active option value\n@param options.selection Current selection\n@param options.inputValue Current input value\n@param options.removeSelection Remove the specified selection value or all values if unspecified",name:"render",required:!1,type:{name:"((options: { getLabelProps: <T extends Element>(props?: HTMLProps<T>) => HTMLProps<T>; getHintProps: <T extends Element>(props?: HTMLProps<T>) => HTMLProps<...>; ... 11 more ...; removeSelection: (value?: ISelectedOption | ... 1 more ... | undefined) => void; }) => ReactNode) | undefined"}},children:{defaultValue:null,description:"@ignore",name:"children",required:!1,type:{name:"((options: IUseComboboxReturnValue) => ReactNode)"}},idPrefix:{defaultValue:null,description:"Prefixes IDs for the combobox",name:"idPrefix",required:!1,type:{name:"string"}},triggerRef:{defaultValue:null,description:"Provides ref access to the underlying trigger element",name:"triggerRef",required:!0,type:{name:"RefObject<HTMLElement>"}},inputRef:{defaultValue:null,description:"Provides ref access to the underlying input element",name:"inputRef",required:!0,type:{name:"RefObject<HTMLInputElement>"}},listboxRef:{defaultValue:null,description:"Provides ref access to the underlying listbox element",name:"listboxRef",required:!0,type:{name:"RefObject<HTMLElement>"}},isAutocomplete:{defaultValue:null,description:"Indicates that the combobox provides autocompletion",name:"isAutocomplete",required:!1,type:{name:"boolean"}},isMultiselectable:{defaultValue:null,description:"Determines whether multiple option values can be selected",name:"isMultiselectable",required:!1,type:{name:"boolean"}},isEditable:{defaultValue:{value:"true"},description:"Determines whether the combobox is editable or select-only",name:"isEditable",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"Indicates that the element is not interactive",name:"disabled",required:!1,type:{name:"boolean"}},hasHint:{defaultValue:null,description:"Indicates the combobox has a hint",name:"hasHint",required:!1,type:{name:"boolean"}},hasMessage:{defaultValue:null,description:"Indicates the combobox has a message",name:"hasMessage",required:!1,type:{name:"boolean"}},options:{defaultValue:null,description:"Provides an ordered list of option groups and options\n@param option.value Unique option value\n@param option.label Optional human-readable text (defaults to `option.value`)\n@param option.selected Sets initial selection for the option\n@param option.disabled Indicates that the option is not interactive\n@param option.options Groups a list of options",name:"options",required:!0,type:{name:"(IOption | { options: IOption[]; label?: string | undefined; })[]"}},inputValue:{defaultValue:null,description:"Sets the input value in a controlled combobox",name:"inputValue",required:!1,type:{name:"string"}},selectionValue:{defaultValue:null,description:"Sets the selection value (or `isMultiselectable` values) in a controlled combobox",name:"selectionValue",required:!1,type:{name:"OptionValue | OptionValue[] | null"}},isExpanded:{defaultValue:null,description:"Determines listbox expansion in a controlled combobox",name:"isExpanded",required:!1,type:{name:"boolean"}},defaultExpanded:{defaultValue:null,description:"Determines default listbox expansion in an uncontrolled combobox",name:"defaultExpanded",required:!1,type:{name:"boolean"}},initialExpanded:{defaultValue:null,description:"Determines listbox expansion on combobox initialization",name:"initialExpanded",required:!1,type:{name:"boolean"}},activeIndex:{defaultValue:null,description:"Sets the currently active option index in a controlled combobox",name:"activeIndex",required:!1,type:{name:"number"}},defaultActiveIndex:{defaultValue:null,description:"Sets the default active option index in an uncontrolled combobox",name:"defaultActiveIndex",required:!1,type:{name:"number"}},initialActiveIndex:{defaultValue:null,description:"Sets the active option index on combobox initialization",name:"initialActiveIndex",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:"Handles combobox state changes\n@param changes.type The event type that triggered the change\n@param changes.isExpanded The updated listbox expansion\n@param changes.selectionValue The updated selection value(s)\n@param changes.inputValue The updated input value\n@param changes.activeIndex The updated active option index",name:"onChange",required:!1,type:{name:"((changes: { type: string; isExpanded?: boolean; selectionValue?: OptionValue | OptionValue[] | null; inputValue?: string | undefined; activeIndex?: number | undefined; }) => void) | undefined"}},environment:{defaultValue:null,description:"Sets the environment where the combobox is rendered",name:"environment",required:!1,type:{name:"Window"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["packages/combobox/src/ComboboxContainer.tsx#ComboboxContainer"]={docgenInfo:ComboboxContainer.__docgenInfo,name:"ComboboxContainer",path:"packages/combobox/src/ComboboxContainer.tsx#ComboboxContainer"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__("./node_modules/@storybook/react/dist/index.mjs");var classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),composeEventHandlers=__webpack_require__("./packages/utilities/src/utils/composeEventHandlers.ts"),useGrid=__webpack_require__("./packages/grid/src/useGrid.ts");const ComboboxStory_toString=option=>option.label||("string"==typeof option.value?option.value:JSON.stringify(option.value)),Option=_ref=>{let{option,isGrouped,activeValue,selection,getOptionProps}=_ref;return(0,jsx_runtime.jsxs)("li",{className:classnames_default()({"pl-2":isGrouped,"bg-blue-100":option.value===activeValue,"cursor-default":option.disabled,"cursor-pointer":!option.disabled,"text-grey-400":option.disabled}),...getOptionProps({option}),children:[(Array.isArray(selection)?void 0!==selection.find((value=>value.value===option.value)):selection&&selection.value===option.value)&&"âœ“ ",ComboboxStory_toString(option)]})};Option.displayName="Option",Option.displayName="Option";const Tags=_ref2=>{let{selection,getTagProps}=_ref2;const{getGridProps,getGridCellProps}=(0,useGrid.N)({matrix:Array.isArray(selection)?[selection.filter((value=>!value.disabled))]:[[]]});return(0,jsx_runtime.jsx)("table",{className:"inline align-top",...getGridProps({"aria-label":"Tag values"}),children:(0,jsx_runtime.jsx)("tbody",{className:"inline",children:(0,jsx_runtime.jsx)("tr",{className:"inline",children:Array.isArray(selection)&&selection.map(((option,index)=>{const tagProps=getTagProps({option,"aria-label":"Press delete or backspace to remove"}),previousDisabledOptions=selection.filter(((_option,_index)=>_option.disabled&&_index<index)),{role,...props}=option.disabled?tagProps:getGridCellProps({rowIndex:0,colIndex:index-previousDisabledOptions.length,...{...tagProps,role:void 0}});return(0,jsx_runtime.jsx)("td",{role,className:"inline",children:(0,jsx_runtime.jsx)("button",{className:"mr-1 px-1",disabled:option.disabled,...props,type:"button",children:ComboboxStory_toString(option)})},index)}))})})})};Tags.displayName="Tags";const Component=_ref3=>{let{layout,isAutocomplete,isEditable,isMultiselectable,isExpanded,disabled,hasHint,hasMessage,activeValue,selection,getLabelProps,getHintProps,getTriggerProps,getInputProps,getTagProps,getListboxProps,getOptGroupProps,getOptionProps,getMessageProps,options}=_ref3;return(0,jsx_runtime.jsxs)("div",{className:"relative",children:[(0,jsx_runtime.jsx)("label",{...getLabelProps(),children:"Label"}),hasHint&&(0,jsx_runtime.jsx)("div",{...getHintProps(),children:"Hint"}),"Garden"===layout&&(0,jsx_runtime.jsxs)("div",{className:classnames_default()("border","border-solid","p-1",{"cursor-default":disabled,"cursor-pointer":!disabled&&(isAutocomplete||!isEditable),"cursor-text":!(disabled||isAutocomplete)&&isEditable,"bg-grey-100":disabled,"border-grey-200":disabled}),...getTriggerProps(),children:[isMultiselectable&&(0,jsx_runtime.jsx)(Tags,{selection,getTagProps}),(0,jsx_runtime.jsx)("input",{className:classnames_default()("border-none","bg-transparent",{"cursor-pointer":!(disabled||isEditable)}),...getInputProps()}),(isAutocomplete||!isEditable)&&(0,jsx_runtime.jsx)("button",{className:classnames_default()("ml-1","px-1",{"cursor-default":disabled}),disabled,tabIndex:-1,type:"button",children:"â–¼"})]}),"Downshift"===layout&&(0,jsx_runtime.jsxs)("div",{...!isEditable&&getTriggerProps(),children:[isMultiselectable&&(0,jsx_runtime.jsx)(Tags,{selection,getTagProps}),(0,jsx_runtime.jsx)("input",{className:classnames_default()({"cursor-pointer":!(disabled||isEditable)}),...getInputProps()}),isAutocomplete&&isEditable&&(0,jsx_runtime.jsx)("button",{className:"ml-1 px-1",...getTriggerProps({"aria-label":"Options"}),type:"button",children:"â–¼"})]}),hasMessage&&(0,jsx_runtime.jsx)("div",{...getMessageProps(),children:"Message"}),(0,jsx_runtime.jsx)("ul",{className:classnames_default()("mt-1","border","border-solid","absolute","w-full",{invisible:!isExpanded}),...getListboxProps({"aria-label":"Options"}),children:0===options.length?(0,jsx_runtime.jsx)("li",{className:"text-grey-400",...getOptionProps({"aria-disabled":!0}),children:"No matches found"}):options.map(((option,index)=>"options"in option?(0,jsx_runtime.jsxs)("li",{role:"none",className:"cursor-default",onMouseDown:event=>event.preventDefault(),children:[option.label&&(0,jsx_runtime.jsx)("b",{className:"block mt-1",children:option.label}),(0,jsx_runtime.jsx)("hr",{"aria-hidden":"true",className:"my-1 border-grey-200"}),(0,jsx_runtime.jsx)("ul",{...getOptGroupProps({"aria-label":option.label||"group"}),children:option.options.map(((groupOption,groupIndex)=>(0,jsx_runtime.jsx)(Option,{option:groupOption,isGrouped:!0,activeValue,selection,getOptionProps},`${index}.${groupIndex}`)))})]},index):(0,jsx_runtime.jsx)(Option,{option,activeValue,selection,getOptionProps},index)))})]})};Component.displayName="Component",Component.displayName="Component";const Container=props=>(0,jsx_runtime.jsx)(ComboboxContainer,{...props,children:containerProps=>(0,jsx_runtime.jsx)(Component,{...props,...containerProps})});Container.displayName="Container";const Hook=props=>{const hookProps=(0,useCombobox.K)(props);return(0,jsx_runtime.jsx)(Component,{...props,...hookProps})};Hook.displayName="Hook";const ComboboxStory=_ref4=>{let{as,...props}=_ref4;const triggerRef=(0,react.createRef)(),inputRef=(0,react.createRef)(),listboxRef=(0,react.createRef)(),[options,setOptions]=(0,react.useState)(props.options),onChange=changes=>{if(props.isAutocomplete&&props.isEditable&&void 0!==changes.inputValue){const value=changes.inputValue;if(""===value)setOptions(props.options);else{const _options=[];props.options.forEach((option=>{"options"in option?_options.push(...option.options):_options.push(option)}));const regex=new RegExp(value.replace(/[.*+?^${}()|[\]\\]/giu,"\\$&"),"gui");setOptions(_options.filter((option=>ComboboxStory_toString(option).match(regex))))}}};return"container"===as?(0,jsx_runtime.jsx)(Container,{...props,triggerRef,inputRef,listboxRef,options,onChange:(0,composeEventHandlers.M)(onChange,props.onChange)}):(0,jsx_runtime.jsx)(Hook,{...props,triggerRef,inputRef,listboxRef,options,onChange:(0,composeEventHandlers.M)(onChange,props.onChange)})},OPTIONS=[{label:"Fruits",options:[{value:"fruit-01",label:"Apple"},{value:"fruit-02",label:"Banana",disabled:!0},{value:"fruit-03",label:"Cherry"},{value:"fruit-04",label:"Grape"},{value:"fruit-05",label:"Kiwi"}]},{label:"Vegetables",options:[{value:"vegetable-01",label:"Asparagus"},{value:"vegetable-02",label:"Broccoli",disabled:!0},{value:"vegetable-03",label:"Brussel sprouts"},{value:"vegetable-04",label:"Cauliflower"},{value:"vegetable-07",label:"Kale"}]}],README_namespaceObject="# @zendeskgarden/container-combobox [![npm version][npm version badge]][npm version link]\n\n[npm version badge]: https://flat.badgen.net/npm/v/@zendeskgarden/container-combobox\n[npm version link]: https://www.npmjs.com/package/@zendeskgarden/container-combobox\n\nThis package includes containers relating to Combobox in the\n[Garden Design System](https://zendeskgarden.github.io/).\n\n## Installation\n\n```sh\nnpm install @zendeskgarden/container-combobox\n```\n\n## Features\n\nThe combobox container encapsulates complexity while supporting a wide variety of\nstandard features. Core logic and events are backed by Downshift. Standard\nnaming and behaviors are finessed to suit Garden's point of view.\n\n- single and multiple option selection\n- non-editable select-only (similar to a native HTML `<select>`)\n- autocomplete (on by default) with user-provided option filtering\n- support for trigger as input parent (Garden layout) vs. trigger as input\n  sibling (Downshift layout)\n\n## Usage\n\nCheck out [storybook](https://zendeskgarden.github.io/react-containers) for live examples.\n\n### useCombobox\n\n```jsx\nimport { useCombobox } from '@zendeskgarden/container-combobox';\n\nconst Combobox = () => {\n  const triggerRef = createRef();\n  const inputRef = createRef();\n  const listboxRef = createRef();\n  const options = [\n    { value: 'value-1', label: 'One' },\n    { value: 'value-2', label: 'Two' },\n    { value: 'value-3', label: 'Three' }\n  ];\n  const {\n    getLabelProps,\n    getInputProps,\n    getTriggerProps,\n    getListboxProps,\n    getOptionProps,\n    isExpanded\n  } = useCombobox({\n    triggerRef,\n    inputRef,\n    listboxRef,\n    options\n  });\n\n  return (\n    <>\n      <label {...getLabelProps()}>Label</label>\n      <input {...getInputProps()} />\n      <button {...getTriggerProps()}>&#9660;</button>\n      <ul\n        {...getListboxProps({ 'aria-label': 'Options' })}\n        style={{ visibility: isExpanded ? 'visible' : 'hidden' }}\n      >\n        {options.map((option, index) => (\n          <li key={index} {...getOptionProps({ option })}>\n            {option.label}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n```\n\n### ComboboxContainer\n\n```jsx\nimport { ComboboxContainer } from '@zendeskgarden/container-combobox';\n\nconst Combobox = () => {\n  const triggerRef = createRef();\n  const inputRef = createRef();\n  const listboxRef = createRef();\n  const options = [\n    { value: 'value-1', label: 'One' },\n    { value: 'value-2', label: 'Two' },\n    { value: 'value-3', label: 'Three' }\n  ];\n\n  return (\n    <ComboboxContainer\n      triggerRef={triggerRef}\n      inputRef={inputRef}\n      listboxRef={listboxRef}\n      options={options}\n    >\n      {({\n        getLabelProps,\n        getInputProps,\n        getTriggerProps,\n        getListboxProps,\n        getOptionProps,\n        isExpanded\n      }) => (\n        <>\n          <label {...getLabelProps()}>Label</label>\n          <input {...getInputProps()} />\n          <button {...getTriggerProps()}>&#9660;</button>\n          <ul\n            {...getListboxProps({ 'aria-label': 'Options' })}\n            style={{ visibility: isExpanded ? 'visible' : 'hidden' }}\n          >\n            {options.map((option, index) => (\n              <li key={index} {...getOptionProps({ option })}>\n                {option.label}\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </ComboboxContainer>\n  );\n};\n```\n";function _createMdxContent(props){const _components=Object.assign({h1:"h1",h2:"h2"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Packages/Combobox",component:ComboboxContainer,args:{as:"hook",layout:"Garden",isEditable:!0,options:OPTIONS},argTypes:{as:{options:["container","hook"],control:"radio",table:{category:"Story"}},layout:{options:["Downshift","Garden"],control:"radio",table:{category:"Story"}},inputRef:{control:!1},listboxRef:{control:!1},triggerRef:{control:!1}}}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"api",children:"API"}),"\n",(0,jsx_runtime.jsx)(dist.$4,{}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"demo",children:"Demo"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"uncontrolled",children:"Uncontrolled"}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{children:(0,jsx_runtime.jsx)(dist.oG,{name:"Uncontrolled",argTypes:{isExpanded:{control:!1},inputValue:{control:!1},activeIndex:{control:!1},selectionValue:{control:!1}},children:args=>(0,jsx_runtime.jsx)(ComboboxStory,{...args})})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"controlled",children:"Controlled"}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{children:(0,jsx_runtime.jsx)(dist.oG,{name:"Controlled",args:{isExpanded:!1,inputValue:"",activeIndex:-1,selectionValue:null},argTypes:{defaultExpanded:{control:!1},defaultSelectionValue:{control:!1}},children:args=>{const updateArgs=(0,external_STORYBOOK_MODULE_CLIENT_API_.useArgs)()[1];return(0,jsx_runtime.jsx)(ComboboxStory,{...args,onChange:changes=>{const{type,...args}=changes;updateArgs(args)}})}})}),"\n",(0,jsx_runtime.jsx)(dist.UG,{children:README_namespaceObject})]})}const uncontrolled=args=>(0,jsx_runtime.jsx)(ComboboxStory,{...args});uncontrolled.storyName="Uncontrolled",uncontrolled.argTypes={isExpanded:{control:!1},inputValue:{control:!1},activeIndex:{control:!1},selectionValue:{control:!1}},uncontrolled.parameters={storySource:{source:"args => <ComboboxStory {...args} />"}};const controlled=args=>{const updateArgs=(0,external_STORYBOOK_MODULE_CLIENT_API_.useArgs)()[1];return(0,jsx_runtime.jsx)(ComboboxStory,{...args,onChange:changes=>{const{type,...args}=changes;updateArgs(args)}})};controlled.storyName="Controlled",controlled.argTypes={defaultExpanded:{control:!1},defaultSelectionValue:{control:!1}},controlled.args={isExpanded:!1,inputValue:"",activeIndex:-1,selectionValue:null},controlled.parameters={storySource:{source:"args => {\n  const updateArgs = useArgs()[1];\n  const handleChange = changes => {\n    const {\n      type,\n      ...args\n    } = changes;\n    updateArgs(args);\n  };\n  return <ComboboxStory {...args} onChange={handleChange} />;\n}"}};const componentMeta={title:"Packages/Combobox",component:ComboboxContainer,args:{as:"hook",layout:"Garden",isEditable:!0,options:OPTIONS},argTypes:{as:{options:["container","hook"],control:"radio",table:{category:"Story"}},layout:{options:["Downshift","Garden"],control:"radio",table:{category:"Story"}},inputRef:{control:!1},listboxRef:{control:!1},triggerRef:{control:!1}},tags:["stories-mdx"],includeStories:["uncontrolled","controlled"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const combobox_stories=componentMeta},"./packages/grid/src/useGrid.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{N:()=>useGrid});var react=__webpack_require__("./node_modules/react/index.js"),KeyboardEventValues=__webpack_require__("./packages/utilities/src/utils/KeyboardEventValues.ts"),useId=__webpack_require__("./packages/utilities/src/utils/useId.ts"),composeEventHandlers=__webpack_require__("./packages/utilities/src/utils/composeEventHandlers.ts");const getCellDown=(matrix,rowIndex,colIndex,wrap)=>{let retVal=[];const rowCount=matrix.length,colCount=matrix[0].length,lastRowLength=matrix[rowCount-1].length;return rowIndex===rowCount-(colCount>lastRowLength?2:1)&&colIndex===colCount-1||(rowIndex===rowCount-(colIndex>=lastRowLength?2:1)?wrap&&(retVal=[0,colIndex+1]):retVal=[rowIndex+1,colIndex]),retVal},getCellLeft=(matrix,rowIndex,colIndex,wrap)=>{let retVal=[];const colCount=matrix[0].length;return 0===rowIndex&&0===colIndex||(0===colIndex?wrap&&(retVal=[rowIndex-1,colCount-1]):retVal=[rowIndex,colIndex-1]),retVal},getCellRight=(matrix,rowIndex,colIndex,wrap)=>{let retVal=[];const rowCount=matrix.length,colCount=matrix[0].length,lastRowIndex=rowCount-1,lastColIndex=matrix[lastRowIndex].length-1;return rowIndex===lastRowIndex&&colIndex===lastColIndex||(colIndex===colCount-1?wrap&&(retVal=[rowIndex+1,0]):retVal=[rowIndex,colIndex+1]),retVal},getCellUp=(matrix,rowIndex,colIndex,wrap)=>{let retVal=[];const rowCount=matrix.length;if(!(0===rowIndex&&0===colIndex))if(0===rowIndex){if(wrap){const col=colIndex-1;retVal=[rowCount-(col>=matrix[rowCount-1].length?2:1),col]}}else retVal=[rowIndex-1,colIndex];return retVal},getId=(idPrefix,rowIndex,colIndex)=>`${idPrefix}--R${rowIndex+1}C${colIndex+1}`,GRID_KEYS=[KeyboardEventValues.t.LEFT,KeyboardEventValues.t.RIGHT,KeyboardEventValues.t.UP,KeyboardEventValues.t.DOWN,KeyboardEventValues.t.HOME,KeyboardEventValues.t.END];function useGrid(_ref){let{rtl,wrap,matrix,idPrefix,onChange=()=>{},environment,rowIndex:controlledRowIndex,colIndex:controlledColIndex,defaultRowIndex,defaultColIndex}=_ref;const doc=environment||document,prefix=(0,useId.M)(idPrefix),[uncontrolledRowIndex,setUncontrolledRowIndex]=(0,react.useState)(null!=defaultRowIndex?defaultRowIndex:0),[uncontrolledColIndex,setUncontrolledColIndex]=(0,react.useState)(null!=defaultColIndex?defaultColIndex:0),isControlled=null!==controlledRowIndex&&null!==controlledColIndex&&void 0!==controlledRowIndex&&void 0!==controlledColIndex,rowIndex=isControlled?controlledRowIndex:uncontrolledRowIndex,colIndex=isControlled?controlledColIndex:uncontrolledColIndex;(0,react.useEffect)((()=>{const rowCount=matrix.length,colCount=matrix[0].length,isRowIndexInvalid=rowIndex>=rowCount,isColIndexInvalid=colIndex>=colCount;if(isRowIndexInvalid||isColIndexInvalid){let _rowIndex=rowIndex,_colIndex=colIndex;isRowIndexInvalid&&(_rowIndex=rowCount>0?rowCount-1:0),isColIndexInvalid&&(_colIndex=colCount>0?colCount-1:0),isControlled||(setUncontrolledRowIndex(_rowIndex),setUncontrolledColIndex(_colIndex)),onChange(_rowIndex,_colIndex)}}),[matrix,rowIndex,colIndex,isControlled,setUncontrolledColIndex,onChange]);const getGridProps=(0,react.useCallback)((_ref2=>{let{role="grid",...other}=_ref2;return{"data-garden-container-id":"containers.grid","data-garden-container-version":"storybook",role:null===role?void 0:role,...other}}),[]),getGridCellProps=(0,react.useCallback)((function(_temp){let{role="gridcell",rowIndex:_rowIndex,colIndex:_colIndex,onFocus,onKeyDown,...other}=void 0===_temp?{rowIndex:0,colIndex:0}:_temp;return{"data-garden-container-id":"containers.grid.cell","data-garden-container-version":"storybook",id:getId(prefix,_rowIndex,_colIndex),role:null===role?void 0:role,tabIndex:rowIndex===_rowIndex&&colIndex===_colIndex?0:-1,onFocus:(0,composeEventHandlers.M)(onFocus,(()=>{isControlled||(setUncontrolledRowIndex(_rowIndex),setUncontrolledColIndex(_colIndex)),onChange(_rowIndex,_colIndex)})),onKeyDown:(0,composeEventHandlers.M)(onKeyDown,(event=>{if(GRID_KEYS.includes(event.key)){event.preventDefault();let row=rowIndex,col=colIndex;switch(event.key){case KeyboardEventValues.t.RIGHT:[row,col]=rtl?getCellLeft(matrix,rowIndex,colIndex,wrap):getCellRight(matrix,rowIndex,colIndex,wrap);break;case KeyboardEventValues.t.LEFT:[row,col]=rtl?getCellRight(matrix,rowIndex,colIndex,wrap):getCellLeft(matrix,rowIndex,colIndex,wrap);break;case KeyboardEventValues.t.DOWN:[row,col]=getCellDown(matrix,rowIndex,colIndex,wrap);break;case KeyboardEventValues.t.UP:[row,col]=getCellUp(matrix,rowIndex,colIndex,wrap);break;case KeyboardEventValues.t.HOME:row=event.ctrlKey?0:rowIndex,col=0;break;case KeyboardEventValues.t.END:{const lastRowIndex=matrix.length-1,lastColIndex=matrix[lastRowIndex].length-1;row=event.ctrlKey?lastRowIndex:rowIndex,col=event.ctrlKey?lastColIndex:matrix[rowIndex].length-1;break}}if(row!==rowIndex||col!==colIndex){const id=getId(prefix,row,col),element=doc.getElementById(id);element?.focus()}}})),...other}}),[matrix,rowIndex,colIndex,doc,prefix,isControlled,onChange,rtl,wrap]);return(0,react.useMemo)((()=>({getGridProps,getGridCellProps})),[getGridProps,getGridCellProps])}}}]);